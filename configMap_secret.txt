
-----------------------------------------------------------------------------------------------------------------
-------------------------------------------------------secret----------------------------------------------------------
             <<< secret une ressource li fiha des key:value seront utilisé qlqpart ds nos pods....
apiVersion: v1
kind: Secret
metadata:
  name: secret-demo
type: Opaque
data:
  username: <base64 encoded value>  <<<<<<<< on mis le code generé par :  echo -n 'username'|base64   
  password: <base64 encoded value>  <<<<<<<< on mis le code generé par :  echo -n 'MyPassword'|base64   

* il y a des secrets  utilsé par le cluster . "kubectl get secrets -n kube_system"
kubectl create secret generic Mysecret --from-leteral=usename=admin  --from-leteral=password=hpinvent 
kubectl create secret generic Mysecret --from-file=./usename.txt  --from-file=./password.txt 
____________________________________________:
apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  containers:
  - image: busybox
    name: busybox
    command: ["/bin/sh"]
    args: ["-c", "sleep 600"]
    env:
    - name: myusername
      valueFrom:
        secretKeyRef:
          name: secret-demo     <<< le nom de la secret ressurce
          key: username
----

kubectl exec busybox -it -- sh
/# env |grep username
admin
/#

-----------------
secret Volume :
________________

apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  volumes:
  - name: secret-volume
    secret:                     <<< hada 1 volume de type secret
      secretName: secret-demo   <<< il cree des fichier des parms key:value ds le point de Montage
  containers:                       defenie dans la secret (fichier username et fichier password avec leur valeur dans chaq fichiers )
  - image: busybox
    name: busybox
    command: ["/bin/sh"]
    args: ["-c", "sleep 600"]
    volumeMounts:
    - name: secret-volume
      mountPath: /mydata

----------------------------------------configMap:

root@kmaster:~# kubectl create configmap myconfigmap1  --from-literal=key1=config1 --from-literal=key2=config2 -o yaml --dry-run=client
apiVersion: v1
data:
  key1: config1
  key2: config2
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: myconfigmap1
root@kmaster:~# 
root@kmaster:~# kubectl create configmap myconfigmap1  --from-literal=key1=config1 --from-literal=key2=config2 
configmap/myconfigmap1 created
root@kmaster:~# kubectl get cm
NAME           DATA   AGE
myconfigmap1   2      3s
root@kmaster:~# 
root@kmaster:~# cp busybox-hostpath.yml busybox-cm.yml 
root@kmaster:~# vim busybox-cm.yml 

root@kmaster:~# cat  /vagrant/justmeandopensource/yamls/6-configmap-1.yaml 
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-configmap
data:
  channel.name: "justmeandopensource"
  channel.owner: "Venkat Nagappan"

root@kmaster:~# cat  /vagrant/justmeandopensource/yamls/6-pod-configmap-volume.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  volumes:
  - name: demo
    configMap:
      name: demo-configmap
  containers:
  - image: busybox
    name: busybox
    command: ["/bin/sh"]
    args: ["-c", "sleep 600"]
    volumeMounts:
    - name: demo
      mountPath: /mydata
root@kmaster:~# 
root@kmaster:~# vim busybox-cm.yml 
root@kmaster:~# kubectl create -f busybox-cm.yml 
pod/busybox created
root@kmaster:~# kubectl get all
NAME          READY   STATUS    RESTARTS   AGE
pod/busybox   1/1     Running   0          14s
root@kmaster:~# kubectl exec -it busybox -- sh
/ # ls /mydata
key1  key2
/ # cat /mydata/key1
/ # cat /mydata/key1;echo
config1
/ # cat /mydata/key2;echo
config2
/ # 
/ # exit
root@kmaster:~# 

----------------------------<<<<<<<<<< use case config Mysql my.cnf  as volume configMap .

immutable secret and configMap are very secure and useful ..
